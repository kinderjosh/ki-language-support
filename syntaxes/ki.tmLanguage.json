{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ki",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#primitives-and-constants"
		},
		{
			"include": "#functions-and-types"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ki",
					"match": "\\b(if|else|return|defer|for|while|break|continue|extern|use|with|rev|asm)\\b"
				},
				{
					"name": "keyword.declaration.ki",
					"match": "\\b(struct|enum|alias)\\b"
				},
				{
					"name": "keyword.other.ki",
					"match": "\\b(cast|sizeof|null)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ki",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ki",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"name": "string.quoted.single.ki",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.ki",
					"match": "\\\\."
				}
			]
		},
		"primitives-and-constants": {
			"patterns": [
				{
					"name": "storage.type.ki",
					"match": "\\b(u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|void|bool|char|string)\\b"
				},
				{
					"name": "constant.language.ki",
					"match": "\\b([A-Z_][A-Z0-9_]*)\\b"
				},
				{
					"name": "constant.language.boolean.ki",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.ki",
					"match": "\\b(0x[0-9a-fA-F]+|0[0-7]+|[0-9_]+(\\.[0-9]+)?)[bfoh]?\\b"
				}
			]
		},
		"functions-and-types": {
			"patterns": [
				{
					"name": "entity.name.function.ki",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*::\\s*extern)"
				},
				{
					"name": "entity.name.function.ki",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*::\\s*inline)"
				},
				{
					"name": "entity.name.type.struct.ki",
					"match": "\\b([A-Z][a-zA-Z0-9_]*)(?!\\s*\\()\\b"
				},
				{
					"name": "entity.name.function.ki",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*::|\\()"
				},
				{
					"name": "entity.name.type.struct.ki",
					"match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*\\("
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.ki",
					"match": "\\b([a-z_][a-zA-Z0-9_]*)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.ki",
					"match": "//.*$"
				},
				{
					"name": "comment.block.ki",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.ki",
					"match": "[+\\-*/%&|^]?="
				},
				{
					"name": "keyword.operator.declaration.ki",
					"match": ":"
				},
				{
					"name": "keyword.operator.declaration.ki",
					"match": ";"
				},
				{
					"name": "keyword.operator.arithmetic.ki",
					"match": "[+\\-*/%]"
				},
				{
					"name": "keyword.operator.comparison.ki",
					"match": "==|!=|<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.ki",
					"match": "&&|\\|\\||!"
				},
				{
					"name": "keyword.operator.bitwise.ki",
					"match": "&|\\||\\^|<<|>>"
				},
				{
					"name": "keyword.operator.pointer.ki",
					"match": "->|\\*|&"
				},
				{
					"name": "keyword.operator.scope.ki",
					"match": "::"
				},
				{
					"name": "keyword.operator.scope.ki",
					"match": "."
				}
			]
		}
	},
	"scopeName": "source.ki"
}